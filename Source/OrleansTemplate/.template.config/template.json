{
  "$schema": "http://json.schemastore.org/template",
  "author": ".NET Boxed",
  "classifications": [".NET Boxed", "Cloud", "Service", "Web"],
  "name": "ASP.NET Core Orleans Boxed",
  "description": "A solution and project for creating and publishing a Microsoft Orleans API.",
  "groupIdentity": "Dotnet.Boxed.Orleans",
  "identity": "Dotnet.Boxed.Orleans.CSharp",
  "shortName": "orleans",
  "defaultName": "OrleansApplication1",
  "tags": {
    "language": "C#",
    "type": "solution"
  },
  "sourceName": "OrleansTemplate",
  "preferNameDirectory": true,
  "guids": [
    "113f2d04-69f0-40c3-8797-ba3f356dd812",
    "B6993204-7350-4D3E-8C48-6C3914230E9F",
    "583E0D0E-322C-4C13-81C6-5E3FB785A8AF",
    "F522EB3C-EF6B-4517-B8D7-F1363E7ADC6E",
    "2A41B472-8BCE-42D5-A64B-C1ED9C9BA60C",
    "B186DB6A-88E5-40AB-B3E1-1468C925C9B7"
  ],
  "primaryOutputs": [{ "path": "OrleansTemplate.sln" }],
  "sources": [
    {
      "modifiers": [
        {
          "condition": "(!Serilog)",
          "exclude": [
            "Source/OrleansTemplate.Server/ConfigureOptions/ConfigureRequestLoggingOptions.cs",
            "Source/OrleansTemplate.Server/TraceIdEnricher.cs",
            "Source/OrleansTemplate.Server/ApplicationBuilderExtensions.cs"
          ]
        },
        {
          "condition": "(!EditorConfig)",
          "exclude": [".editorconfig"]
        },
        {
          "condition": "(!GitHub)",
          "exclude": [
            ".github/ISSUE_TEMPLATE/**/*",
            ".github/CODE_OF_CONDUCT.md",
            ".github/CONTRIBUTING.md",
            ".github/PULL_REQUEST_TEMPLATE.md",
            ".github/SECURITY.md"
          ]
        },
        {
          "condition": "(!ReadMe)",
          "exclude": ["README.md"]
        },
        {
          "condition": "(!HealthCheck)",
          "exclude": [
            "Source/OrleansTemplate.Abstractions/Grains/HealthChecks/**/*",
            "Source/OrleansTemplate.Grains/HealthChecks/**/*",
            "Source/OrleansTemplate.Server/HealthChecks/**/*",
            "Source/OrleansTemplate.Server/ApplicationBuilderExtensions.cs",
            "Source/OrleansTemplate.Server/Startup.cs"
          ]
        },
        {
          "condition": "(!IntegrationTest)",
          "exclude": ["Tests/ApiTemplate.IntegrationTest/**/*"]
        },
        {
          "condition": "(!Docker)",
          "exclude": [
            "Source/OrleansTemplate.Server/Dockerfile",
            ".dockerignore"
          ]
        },
        {
          "condition": "(!GitHubActions)",
          "exclude": [
            ".github/workflows/build.yml",
            ".github/workflows/codeql-analysis.yml",
            ".github/workflows/release-drafter.yml",
            ".github/release-drafter.yml"
          ]
        },
        {
          "condition": "(!OpenTelemetry)",
          "exclude": [
            "Source/OrleansTemplate.Abstractions/Constants/OpenTelemetryAttributeName.cs",
            "Source/OrleansTemplate.Abstractions/Constants/OpenTelemetryHttpFlavour.cs",
            "Source/OrleansTemplate.Server/TracerProviderBuilderExtensions.cs"
          ]
        }
      ]
    }
  ],
  "symbols": {
    "Title": {
      "type": "parameter",
      "datatype": "string",
      "defaultValue": "Project Title",
      "replaces": "PROJECT-TITLE",
      "description": "The name of the project which determines the assembly product name. If the Swagger feature is enabled, shows the title on the Swagger UI."
    },
    "TitleXmlEncoded": {
      "type": "derived",
      "replaces": "PROJECT-TITLE-XML",
      "valueSource": "Title",
      "valueTransform": "xmlEncode"
    },
    "Description": {
      "type": "parameter",
      "datatype": "string",
      "defaultValue": "Project Description",
      "replaces": "PROJECT-DESCRIPTION",
      "description": "A description of the project which determines the assembly description. If the Swagger feature is enabled, shows the description on the Swagger UI."
    },
    "DescriptionXmlEncoded": {
      "type": "derived",
      "replaces": "PROJECT-DESCRIPTION-XML",
      "valueSource": "Description",
      "valueTransform": "xmlEncode"
    },
    "Author": {
      "type": "parameter",
      "datatype": "string",
      "defaultValue": "Project Author",
      "replaces": "PROJECT-AUTHOR",
      "description": "The name of the author of the project which determines the assembly author, company and copyright information."
    },
    "AuthorXmlEncoded": {
      "type": "derived",
      "replaces": "PROJECT-AUTHOR-XML",
      "valueSource": "Author",
      "valueTransform": "xmlEncode"
    },
    "Contact": {
      "type": "parameter",
      "datatype": "string",
      "defaultValue": "[user@example.com|@ExampleUser]",
      "replaces": "PROJECT-CONTACT",
      "description": "The contact details to use if someone wants to contact you about a security vulnerability or code of conduct issues."
    },
    "ContactXmlEncoded": {
      "type": "derived",
      "replaces": "PROJECT-CONTACT-XML",
      "valueSource": "Contact",
      "valueTransform": "xmlEncode"
    },
    "EditorConfig": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Include .editorconfig File",
      "description": "Add a .editorconfig file to set a fixed code style."
    },
    "SourceControl": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "GitHub",
          "description": "Adds a .github directory containing a code of conduct, contributing guide, pull request template and issue templates."
        },
        {
          "choice": "None",
          "description": "No source control provider is being used."
        }
      ],
      "defaultValue": "GitHub",
      "displayName": "Source Control",
      "description": "Select which source control provider you are using if any, to add provider specific features."
    },
    "GitHub": {
      "type": "computed",
      "value": "(SourceControl == \"GitHub\")"
    },
    "GitHubUsername": {
      "type": "parameter",
      "datatype": "string",
      "defaultValue": "Username",
      "replaces": "GITHUB-USERNAME",
      "displayName": "GitHub Username",
      "description": "Your GitHub username or organisation name that the project lives under."
    },
    "GitHubUsernameLowercase": {
      "type": "derived",
      "replaces": "GITHUB-USERNAME-LOWERCASE",
      "valueSource": "GitHubUsername",
      "valueTransform": "lowerCaseInvariant"
    },
    "GitHubProject": {
      "type": "parameter",
      "datatype": "string",
      "defaultValue": "Project",
      "replaces": "GITHUB-PROJECT",
      "displayName": "GitHub Project",
      "description": "The name of your GitHub project."
    },
    "ReadMe": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Include README.md File",
      "description": "Add a README.md markdown file describing the project."
    },
    "TreatWarningsAsErrors": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Treat Warnings As Errors",
      "description": "Treat warnings as errors."
    },
    "OpenTelemetry": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "Open Telemetry",
      "description": "Instrument, generate, collect, and export telemetry data (metrics, logs, and traces) using the Open Telemetry standard."
    },
    "Logging": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "Serilog",
          "description": "Logging using Serilog provides an excellent structured logging experience."
        },
        {
          "choice": "None",
          "description": "Not using any logging."
        }
      ],
      "defaultValue": "None",
      "description": "The logging framework to use."
    },
    "Serilog": {
      "type": "computed",
      "value": "(Logging == \"Serilog\")"
    },
    "ApplicationInsights": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "Application Insights",
      "description": "Monitor internal information about how your application is running, as well as external user information using the Microsoft Azure cloud."
    },
    "ApplicationInsightsKey": {
      "type": "parameter",
      "datatype": "string",
      "defaultValue": "11111111-2222-3333-4444-555555555555",
      "replaces": "APPLICATION-INSIGHTS-INSTRUMENTATION-KEY",
      "displayName": "Application Insights Key",
      "description": "Your Application Insights instrumentation key e.g. 11111111-2222-3333-4444-555555555555."
    },
    "HealthCheck": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Health Check",
      "description": "A health-check endpoint that returns the status of this API and its dependencies, giving an indication of its health."
    },
    "HttpPort": {
      "type": "parameter",
      "datatype": "integer",
      "defaultValue": "8080",
      "displayName": "HTTP Port",
      "description": "Port number to use for the HTTP endpoint in launchSettings.json."
    },
    "HttpPortConstant": {
      "type": "generated",
      "generator": "constant",
      "parameters": {
        "value": "8080"
      }
    },
    "HttpPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "HttpPort",
        "fallbackVariableName": "HttpPortConstant"
      },
      "replaces": "8080"
    },
    "TLS": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Adds TLS transport encryption to secure communication between the client and server."
    },
    "IntegrationTest": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Integration Test",
      "description": "Adds an integration test project."
    },
    "StyleCop": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Adds and enforces StyleCop analysers. NOTE: You may need to sort using statements if you enable this due to limitations in the dotnet new templating engine."
    },
    "Docker": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "description": "Adds an optimised Dockerfile to add the ability build a Docker image."
    },
    "DockerRegistry": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "GitHubContainerRegistry",
          "displayName": "GitHub Container Registry",
          "description": "Push Docker images to the GitHub Container Registry."
        },
        {
          "choice": "DockerHub",
          "displayName": "Docker Hub",
          "description": "Push Docker images to Docker Hub."
        }
      ],
      "defaultValue": "GitHubContainerRegistry",
      "displayName": "Docker Registry",
      "description": "The Docker container registry to push Docker images to."
    },
    "GitHubContainerRegistry": {
      "type": "computed",
      "value": "(DockerRegistry == \"GitHubContainerRegistry\")"
    },
    "DockerHub": {
      "type": "computed",
      "value": "(DockerRegistry == \"DockerHub\")"
    },
    "GitHubActions": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "GitHub Actions",
      "description": "Adds GitHub Actions continuous integration, automatic release drafting and CodeQL security scanning."
    },

    "AuthoringMode": {
      "type": "generated",
      "generator": "constant",
      "parameters": {
        "value": "false"
      }
    },
    "SkipInstallAzuriteEmulator": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "Skip Installing Azure Storage Emulator",
      "description": "Skips the installation of the Azure Storage Emulator."
    },
    "SkipStartAzuriteEmulator": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "Skip Starting Azure Storage Emulator",
      "description": "Skips the execution of the Azure Storage Emulator."
    }
  },
  "postActions": [
    {
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "condition": "(!SkipInstallAzuriteEmulator)",
      "continueOnError": true,
      "description ": "Install the Azurite Emulator where data is stored at development time.",
      "args": {
        "executable": "powershell.exe",
        "args": "start https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azurite",
        "redirectStandardOutput": "false",
        "redirectStandardError": "false"
      },
      "manualInstructions": [
        {
          "text": "Install the Azurite Emulator from https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azurite."
        }
      ]
    },
    {
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "condition": "(!SkipStartAzuriteEmulator)",
      "continueOnError": true,
      "description ": "Run the Azurite Emulator.",
      "args": {
        "executable": "C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Common7\\IDE\\Extensions\\Microsoft\\Azure Storage Emulator\\azurite.exe",
        "args": "start",
        "redirectStandardOutput": "false",
        "redirectStandardError": "false"
      },
      "manualInstructions": [
        {
          "text": "Run the Azurite Emulator."
        }
      ]
    }
  ]
}
